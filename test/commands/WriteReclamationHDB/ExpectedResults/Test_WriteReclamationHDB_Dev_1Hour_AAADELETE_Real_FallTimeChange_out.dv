# DateValueTS 1.6 file
# File generated by...
# program:      TSTool 11.10.00 (2016-04-12)
# user:         sam
# date:         Sun May 01 19:16:49 America/Denver 2016
# host:         colorado
# directory:    C:\owf-gitrepos\cdss-app-tstool-test\test\regression\commands\general\WriteReclamationHDB
# command line: TSTool
#  -home test/operational/CDSS
# -----------------------------------------------------------------------
# Command file name: "C:\owf-gitrepos\cdss-app-tstool-test\test\regression\commands\general\WriteReclamationHDB\Test_WriteReclamationHDB_Dev_1Hour_AAADELETE_Real_FallTimeChange.TSTool"
# Commands: 
# # Test writing a 1hour REAL time series to ReclamationHDB database:
# #   - development database
# #   - real HOUR table
# #   - SDI 100376 (AAA_DELETE site common name)
# #   - 1hour data - note that HDB uses end_date_time for end of interval but write routines key off of start_date_time
# #   - Write twice with different numbers to make sure old results are not just sitting
# #     in the database.  Write non-missing values because HDB convention is to
# #     NOT write missing values (not sure how re-write is handled if missing involved).
# #   - For two writes, use TSID read once, and ReadReclamationHDB() once to exercise read.
# #   - Set the period to cross the time change, which occurs at 2010-11-07 02
# #   - TO EXAMINE tests, look at first 3 time series
# StartLog(LogFile="Results/Test_WriteReclamationHDB_Dev_1Hour_AAADELETE_Real_FallTimeChange.TSTool.log")
# RemoveFile(InputFile="Results/Test_ReclamationHDB_Dev_1Hour_AAADELETE_Real_FallTimeChange_out.dv",IfNotFound=Ignore)
# # Query the session time zone to troubleshoot
# ReadTableFromDataStore(DataStore="hdbtest",Sql="SELECT SESSIONTIMEZONE FROM DUAL",TableID="SESSIONTIMEZONE")
# RunSql(DataStore="hdbtest",Sql="ALTER SESSION SET TIME_ZONE='MST'")
# ReadTableFromDataStore(DataStore="hdbtest",Sql="SELECT SESSIONTIMEZONE FROM DUAL",TableID="SESSIONTIMEZONE_AfterSet")
# #
# #------------------------- start the first pass -------------------------------------
# SetOutputPeriod(OutputStart="2010-11-07 00",OutputEnd="2010-11-07 12")
# SetInputPeriod(InputStart="2010-11-07 00",InputEnd="2010-11-07 12")
# NewPatternTimeSeries(Alias="AAA_DELETE",NewTSID="AAA_DELETE.HDB.flow.1Hour",Description="AAA_DELETE",Units="cfs",PatternValues="55,105,125,135,755")
# # First write the time series to the database...
# SetDebugLevel(LogFileLevel=1)
# WriteReclamationHDB(DataStore="hdbtest",SiteDataTypeID=100376,ValidationFlag="A",TimeZone="MST")
# SetDebugLevel(ScreenLevel=0,LogFileLevel=0)
# # Now read the same time series from the database using the period that was written...
# SetDebugLevel(LogFileLevel=1)
# ReadReclamationHDB(DataStore="hdbtest",Interval="1Hour",SiteDataTypeID=100376,Alias="FirstRead")
# SetDebugLevel(ScreenLevel=0,LogFileLevel=0)
# # Compare the time series read as a time series with a time series created from SQL query output.
# ReadTableFromDataStore(DataStore="hdbtest",Sql="select * from R_HOUR where site_datatype_id = 100376 and end_date_time >= to_date('2010-11-07 00','YYYY-MM-DD HH24') and end_date_time <= to_date('2010-11-07 12','YYYY-MM-DD HH24') order by start_date_time",TableID="r_hour1")
# TableToTimeSeries(TableID="r_hour1",DateTimeColumn="end_date_time",LocationID="100376",ValueColumn="value",Interval=1Hour,Units="cfs",Alias="FirstReadFromTable",InputStart="${InputStart}",InputEnd="${InputEnd}")
# CompareTimeSeries(TSID1="AAA_DELETE",TSID2="FirstRead",WarnIfDifferent=True)
# CompareTimeSeries(TSID1="FirstRead",TSID2="FirstReadFromTable",WarnIfDifferent=True)
# # Also check for missing because there should be none over time zone change
# CheckTimeSeries(TSList=AllMatchingTSID,TSID="FirstRead",CheckCriteria="Missing")
# CheckTimeSeries(TSList=AllMatchingTSID,TSID="FirstReadFromTable",CheckCriteria="Missing")
# #------------------------- end the first pass -------------------------------------
# #
# #------------------------- start the second pass -------------------------------------
# # Start second pass (previous values x 10)...
# NewPatternTimeSeries(Alias="AAA_DELETE",NewTSID="AAA_DELETE.HDB.flow.1Hour",Description="AAA_DELETE",Units="cfs",PatternValues="550,1050,1250,1350,7550")
# # First write the time series to the database...
# WriteReclamationHDB(DataStore="hdbtest",TSList=LastMatchingTSID,TSID="AAA_DELETE",SiteDataTypeID=100376,ValidationFlag="A",TimeZone="MST")
# # Now read the same time series from the database using the period that was written...
# ReadReclamationHDB(DataStore="hdbtest",Interval="1Hour",SiteDataTypeID=100376,Alias="SecondRead")
# # Compare the time series read as a time series with a time series created from SQL query output.
# ReadTableFromDataStore(DataStore="hdbtest",Sql="select * from R_HOUR where site_datatype_id = 100376 and end_date_time >= to_date('2010-11-07 00','YYYY-MM-DD HH24') and end_date_time <= to_date('2010-11-07 12','YYYY-MM-DD HH24') order by start_date_time",TableID="r_hour2")
# TableToTimeSeries(TableID="r_hour2",DateTimeColumn="end_date_time",LocationID="100376",ValueColumn="value",Interval=1Hour,Units="cfs",Alias="SecondReadFromTable",InputStart="${InputStart}",InputEnd="${InputEnd}")
# CompareTimeSeries(TSID1="AAA_DELETE",TSID2="SecondRead",WarnIfDifferent=True)
# CompareTimeSeries(TSID1="SecondRead",TSID2="SecondReadFromTable",WarnIfDifferent=True)
# # Also check for missing because there should be none over time zone change
# CheckTimeSeries(TSList=AllMatchingTSID,TSID="SecondRead",CheckCriteria="Missing")
# CheckTimeSeries(TSList=AllMatchingTSID,TSID="SecondReadFromTable",CheckCriteria="Missing")
# #------------------------- end the second pass -------------------------------------
# #
# # Uncomment the following command to regenerate the expected results file.
# WriteDateValue(TSList=LastMatchingTSID,TSID="FirstRead",OutputFile="ExpectedResults/Test_WriteReclamationHDB_Dev_1Hour_AAADELETE_Real_FallTimeChange_out.dv")
# # Generate new output for what was read from the database...
# WriteDateValue(TSList=LastMatchingTSID,TSID="FirstRead",OutputFile="Results/Test_WriteReclamationHDB_Dev_1Hour_AAADELETE_Real_FallTimeChange_out.dv")
# # Do regression comparison...
# CompareFiles(InputFile1="ExpectedResults\Test_WriteReclamationHDB_Dev_1Hour_AAADELETE_Real_FallTimeChange_out.dv",InputFile2="Results/Test_WriteReclamationHDB_Dev_1Hour_AAADELETE_Real_FallTimeChange_out.dv",IfDifferent=Warn)
# 
# -----------------------------------------------------------------------------
# HydroBase database is: HydroBase_CO_20160407 on localhost\CDSS
# HydroBase.db_version:  design version: 20141201  last data change: 20160407
# HydroBase table structure for software is at least 2013040420130404
# HydroBase input name is "".
# Stored procedures are being used.
# -----------------------------------------------------------------------------
# 
# 
# -----------------------------------------------------------------------------
# HydroBase database is: HydroBase_CO_20160407 on localhost\CDSS
# HydroBase.db_version:  design version: 20141201  last data change: 20160407
# HydroBase table structure for software is at least 2013040420130404
# HydroBase input name is "".
# Stored procedures are being used.
# -----------------------------------------------------------------------------
# 
#
Delimiter   = " "
NumTS       = 1
TSID        = "diversion:100376.HDB.flow.1Hour.AAA_DELETE"
Alias       = "FirstRead"
Description = "100376"
DataType    = "flow"
Units       = "cfs"
MissingVal  = NaN
Start       = 2010-11-07 00
End         = 2010-11-07 12
#
# Time series comments/histories:
#
#
# Creation history for time series 1 (TSID=diversion:100376.HDB.flow.1Hour.AAA_DELETE Alias=FirstRead):
#
#   Created new time series with interval determined from TSID "diversion:100376.HDB.flow.1Hour.AAA_DELETE"
#
#EndHeader
Date Time "FirstRead, cfs"
2010-11-07 00 55.0000
2010-11-07 01 105.0000
2010-11-07 02 125.0000
2010-11-07 03 135.0000
2010-11-07 04 755.0000
2010-11-07 05 55.0000
2010-11-07 06 105.0000
2010-11-07 07 125.0000
2010-11-07 08 135.0000
2010-11-07 09 755.0000
2010-11-07 10 55.0000
2010-11-07 11 105.0000
2010-11-07 12 125.0000
