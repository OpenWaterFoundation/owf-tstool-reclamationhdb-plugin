# Test writing a 3hour time series to ReclamationHDB database:
#   - development database
#   - new WRITE_REAL_DATA procedure
#   - real HOUR table
#   - SDI 100376 (AAA_DELETE site common name)
#   - 3hour data - note that HDB uses end_date_time for end of interval but write routines key off of start_date_time
#   - overlap daylight savings change to confirm handling
#   - Write twice with different numbers to make sure old results are not just sitting
#     in the database.  Write non-missing values because HDB convention is to
#     NOT write missing values (not sure how re-write is handled if missing involved).
#   - For two writes, use TSID read once, and ReadReclamationHDB() once to exercise read.
#   - TO EXAMINE tests, look at first 3 time series
#@testSuite ReclamationHDB
StartLog(LogFile="Results/Test_WriteReclamationHDB_WriteData_Dev_3Hour_AAADELETE_Real.TSTool.log")
RemoveFile(InputFile="Results/Test_ReclamationHDB_WriteData_Dev_3Hour_AAADELETE_Real_out.dv",IfNotFound=Ignore)
SetOutputPeriod(OutputStart="2010-03-10 00",OutputEnd="2010-03-15 12")
SetInputPeriod(InputStart="2010-03-10 00",InputEnd="2010-03-15 12")
SetProperty(PropertyName="CompareStart",PropertyType=DateTime,PropertyValue="2010-03-10 03")
SetProperty(PropertyName="CompareEnd",PropertyType=DateTime,PropertyValue="2010-03-15 12")
#------------------------- start the first pass -------------------------------------
# The following removes old data to make sure loads from other tests don't impact this test - DOES NOT SEEM TO WORK
# RunSql(DataStore="hdbtest",SqlFile="Test_WriteReclamationHDB_WriteData_Dev_3Hour_AAADELETE_Real.sql")
NewPatternTimeSeries(Alias="AAA_DELETE",NewTSID="AAA_DELETE.HDB.flow.3Hour",Description="AAA_DELETE",Units="cfs",PatternValues="5500,10500,12500,13500,75500")
# First write the time series to the database...
WriteReclamationHDB(DataStore="hdbtest",SiteDataTypeID=100376,Agency="USBR",ValidationFlag="A",TimeZone="MST",WriteProcedure="WRITE_DATA")
# Now read the same time series from the database using the period that was written...
SetDebugLevel(LogFileLevel=1)
ReadReclamationHDB(DataStore="hdbtest",Interval="3Hour",NHourIntervalOffset=0,SiteDataTypeID=100376,Alias="FirstRead")
# Compare the time series read as a time series with a time series created from SQL query output.
# Because 3Hour data are stored in the R_HOUR table, which may contain other test data, only query 3hour offsets
# Because the database uses a DATE type, have to cast to TIMESTAMP (JDBC driver does this automatically but not SQL?)
#ReadTableFromDataStore(DataStore="hdbtest",Sql="select * from R_HOUR where site_datatype_id = 100376 and end_date_time >= to_date('${InputStart}','YYYY-MM-DD HH24') and end_date_time <= to_date('${InputEnd}','YYYY-MM-DD HH24') and ((extract(hour from cast(end_date_time as timestamp))=0) or (extract(hour from cast(end_date_time as timestamp))=3) or (extract(hour from cast(end_date_time as timestamp))=6) or (extract(hour from cast(end_date_time as timestamp))=9) or (extract(hour from cast(end_date_time as timestamp))=12) or (extract(hour from cast(end_date_time as timestamp))=15) or (extract(hour from cast(end_date_time as timestamp))=18) or (extract(hour from cast(end_date_time as timestamp))=21)) order by start_date_time",TableID="r_hour1")
ReadTableFromDataStore(DataStore="hdbtest",Sql="select * from R_HOUR where site_datatype_id = 100376 and end_date_time >= to_date('${InputStart}','YYYY-MM-DD HH24') and end_date_time <= to_date('${InputEnd}','YYYY-MM-DD HH24') and ((extract(hour from cast(start_date_time as timestamp))=0) or (extract(hour from cast(start_date_time as timestamp))=3) or (extract(hour from cast(start_date_time as timestamp))=6) or (extract(hour from cast(start_date_time as timestamp))=9) or (extract(hour from cast(start_date_time as timestamp))=12) or (extract(hour from cast(start_date_time as timestamp))=15) or (extract(hour from cast(start_date_time as timestamp))=18) or (extract(hour from cast(start_date_time as timestamp))=21)) order by start_date_time",TableID="r_hour1")
SetDebugLevel(ScreenLevel=0,LogFileLevel=0)
TableToTimeSeries(TableID="r_hour1",DateTimeColumn="start_date_time",LocationID="100376",ValueColumn="value",Interval=3Hour,Units="cfs",Alias="FirstReadFromTable")
ShiftTimeByInterval(TSList=AllMatchingTSID,TSID="FirstReadFromTable",ShiftData="-1,1.0")
CompareTimeSeries(TSID1="AAA_DELETE",TSID2="FirstRead",IfDifferent=Warn)
CompareTimeSeries(TSID1="FirstRead",TSID2="FirstReadFromTable",AnalysisStart="${CompareStart}",AnalysisEnd="${CompareEnd}",IfDifferent=Warn)
# Also check for missing because there should be none over time zone change
CheckTimeSeries(TSList=AllMatchingTSID,TSID="FirstRead",CheckCriteria="Missing",AnalysisStart="${CompareStart}",AnalysisEnd="${CompareEnd}")
CheckTimeSeries(TSList=AllMatchingTSID,TSID="FirstReadFromTable",CheckCriteria="Missing",AnalysisStart="${CompareStart}",AnalysisEnd="${CompareEnd}")
#------------------------- end the first pass -------------------------------------
#
#------------------------- start the second pass -------------------------------------
# Start second pass (previous values x 10)...
NewPatternTimeSeries(Alias="AAA_DELETE",NewTSID="AAA_DELETE.HDB.flow.3Hour",Description="AAA_DELETE",Units="cfs",PatternValues="55000,105000,125000,135000,755000")
# NewPatternTimeSeries(Alias="AAA_DELETE",NewTSID="AAA_DELETE.HDB.flow.3Hour",Description="AAA_DELETE",Units="cfs",PatternValues="10,20,30,40,50")
# First write the time series to the database...
WriteReclamationHDB(DataStore="hdbtest",TSList=LastMatchingTSID,TSID="AAA_DELETE",SiteDataTypeID=100376,Agency="USBR",ValidationFlag="A",TimeZone="MST",WriteProcedure="WRITE_DATA")
# Now read the same time series from the database using the period that was written...
ReadReclamationHDB(DataStore="hdbtest",Interval="3Hour",NHourIntervalOffset=0,SiteDataTypeID=100376,Alias="SecondRead")
# Compare the time series read as a time series with a time series created from SQL query output.
ReadTableFromDataStore(DataStore="hdbtest",Sql="select * from R_HOUR where site_datatype_id = 100376 and end_date_time >= to_date('${InputStart}','YYYY-MM-DD HH24') and end_date_time <= to_date('${InputEnd}','YYYY-MM-DD HH24') and ((extract(hour from cast(start_date_time as timestamp))=0) or (extract(hour from cast(start_date_time as timestamp))=3) or (extract(hour from cast(start_date_time as timestamp))=6) or (extract(hour from cast(start_date_time as timestamp))=9) or (extract(hour from cast(start_date_time as timestamp))=12) or (extract(hour from cast(start_date_time as timestamp))=15) or (extract(hour from cast(start_date_time as timestamp))=18) or (extract(hour from cast(start_date_time as timestamp))=21)) order by start_date_time",TableID="r_hour2")
TableToTimeSeries(TableID="r_hour2",DateTimeColumn="start_date_time",LocationID="100376",ValueColumn="value",Interval=3Hour,Units="cfs",Alias="SecondReadFromTable")
ShiftTimeByInterval(TSList=AllMatchingTSID,TSID="SecondReadFromTable",ShiftData="-1,1.0")
CompareTimeSeries(TSID1="AAA_DELETE",TSID2="SecondRead",IfDifferent=Warn)
CompareTimeSeries(TSID1="SecondRead",TSID2="SecondReadFromTable",AnalysisStart="${CompareStart}",AnalysisEnd="${CompareEnd}",IfDifferent=Warn)
# Also check for missing because there should be none over time zone change
CheckTimeSeries(TSList=AllMatchingTSID,TSID="SecondRead",CheckCriteria="Missing",AnalysisStart="${CompareStart}",AnalysisEnd="${CompareEnd}")
CheckTimeSeries(TSList=AllMatchingTSID,TSID="SecondReadFromTable",CheckCriteria="Missing",AnalysisStart="${CompareStart}",AnalysisEnd="${CompareEnd}")
#------------------------- end the second pass -------------------------------------
#
# Uncomment the following command to regenerate the expected results file.
# WriteDateValue(TSList=LastMatchingTSID,TSID="FirstRead",OutputFile="ExpectedResults/Test_WriteReclamationHDB_WriteData_Dev_3Hour_AAADELETE_Real_out.dv")
# Generate new output for what was read from the database...
WriteDateValue(TSList=LastMatchingTSID,TSID="FirstRead",OutputFile="Results/Test_WriteReclamationHDB_WriteData_Dev_3Hour_AAADELETE_Real_out.dv")
# Do regression comparison...
CompareFiles(InputFile1="ExpectedResults\Test_WriteReclamationHDB_WriteData_Dev_3Hour_AAADELETE_Real_out.dv",InputFile2="Results/Test_WriteReclamationHDB_WriteData_Dev_3Hour_AAADELETE_Real_out.dv",IfDifferent=Warn)
